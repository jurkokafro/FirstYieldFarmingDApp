{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Jure\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Jure\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Jure\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Jure\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Jure\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\Jure\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\Jure\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Jure\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './Navbar.js';\nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/Tether.json';\nimport RWD from '../truffle_abis/RWD.json';\nimport DecentralBank from '../truffle_abis/DecentralBank.json';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function () {\n      var _UNSAFE_componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function UNSAFE_componentWillMount() {\n        return _UNSAFE_componentWillMount.apply(this, arguments);\n      }\n\n      return UNSAFE_componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('No ethereum browser detected. Check out meta mask.');\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, account, networkId, tetherData, tether, tetherBalance, rwdData, rwd, rwdBalance, decentralBankData, decentralBank, stakingBalance;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                account = _context3.sent;\n                this.setState({\n                  account: account[0]\n                });\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                //Load Tether contracts\n                tetherData = Tether.networks[networkId];\n                console.log(tetherData, 'GLEJ TU');\n\n                if (!tetherData) {\n                  _context3.next = 20;\n                  break;\n                }\n\n                tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n                this.setState({\n                  tether: tether\n                });\n                _context3.next = 15;\n                return tether.methods.balanceOf(this.state.account).call();\n\n              case 15:\n                tetherBalance = _context3.sent;\n                //balance se bo spreminjal, zato je let\n                this.setState({\n                  tetherBalance: tetherBalance.toString()\n                });\n                console.log(\"Stanje racuna: \", tetherBalance);\n                _context3.next = 21;\n                break;\n\n              case 20:\n                window.alert('Error: Tether contract not deployed to the detected network!');\n\n              case 21:\n                //Load Reward contracts\n                rwdData = RWD.networks[networkId];\n\n                if (!rwdData) {\n                  _context3.next = 32;\n                  break;\n                }\n\n                rwd = new web3.eth.Contract(RWD.abi, rwdData.address);\n                this.setState({\n                  rwd: rwd\n                });\n                _context3.next = 27;\n                return rwd.methods.balanceOf(this.state.account).call();\n\n              case 27:\n                rwdBalance = _context3.sent;\n                //balance se bo spreminjal, zato je let\n                this.setState({\n                  rwdBalance: rwdBalance.toString()\n                });\n                console.log('Stanje RWD:', rwdBalance);\n                _context3.next = 33;\n                break;\n\n              case 32:\n                window.alert('Error: Reward contract not deployed to the detected network!');\n\n              case 33:\n                //Load decentral bank - update state by bringing contract + update the staking balance\n                decentralBankData = DecentralBank.networks[networkId];\n\n                if (!decentralBankData) {\n                  _context3.next = 44;\n                  break;\n                }\n\n                decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address);\n                this.setState({\n                  decentralBank: decentralBank\n                });\n                _context3.next = 39;\n                return decentralBank.methods.stakingBalance(this.state.account).call();\n\n              case 39:\n                stakingBalance = _context3.sent;\n                //balance se bo spreminjal, zato je let\n                this.setState({\n                  stakingBalance: stakingBalance.toString()\n                });\n                console.log('Staking Balance:', stakingBalance);\n                _context3.next = 45;\n                break;\n\n              case 44:\n                window.alert('Error: Staking balance not deployed to the detected network!');\n\n              case 45:\n                this.setState({\n                  loading: false\n                });\n\n              case 46:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props)); //inicialization\n\n    _this.state = {\n      account: \"0x0\",\n      tether: {},\n      rwd: {},\n      decentralBank: {},\n      tetherBalance: '0',\n      rwdBalance: '0',\n      stakingBalance: '0',\n      loading: true\n    };\n    return _this;\n  } //Our React Code\n\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Main, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 20\n        }\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Jure/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js"],"names":["React","Component","Navbar","Web3","Tether","RWD","DecentralBank","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","account","setState","net","getId","networkId","tetherData","networks","console","log","tether","Contract","abi","address","methods","balanceOf","state","call","tetherBalance","toString","rwdData","rwd","rwdBalance","decentralBankData","decentralBank","stakingBalance","loading","props"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport './App.css'\r\nimport Navbar from './Navbar.js'\r\nimport Web3 from 'web3'\r\nimport Tether from '../truffle_abis/Tether.json'\r\nimport RWD from '../truffle_abis/RWD.json'\r\nimport DecentralBank from '../truffle_abis/DecentralBank.json'\r\n\r\n\r\nclass App extends Component {\r\n\r\n    async UNSAFE_componentWillMount() {\r\n        await this.loadWeb3()\r\n        await this.loadBlockchainData()\r\n    }\r\n\r\n    async loadWeb3() {\r\n        if(window.ethereum) {\r\n            window.web3 = new Web3(window.ethereum)\r\n            await window.ethereum.enable()\r\n        } else if(window.web3) {\r\n            window.web3 = new Web3(window.web3.currentProvider)\r\n        } else {\r\n            window.alert('No ethereum browser detected. Check out meta mask.')\r\n        }\r\n    }\r\n\r\n    async loadBlockchainData() {\r\n        const web3 = window.web3\r\n        const account = await web3.eth.getAccounts()\r\n        this.setState({account: account[0]})\r\n        const networkId = await web3.eth.net.getId()\r\n\r\n        //Load Tether contracts\r\n        const tetherData = Tether.networks[networkId]\r\n        console.log(tetherData, 'GLEJ TU')\r\n        if(tetherData) {\r\n            const tether = new web3.eth.Contract(Tether.abi, tetherData.address)\r\n            this.setState({tether})\r\n\r\n            let tetherBalance = await tether.methods.balanceOf(this.state.account).call() //balance se bo spreminjal, zato je let\r\n            this.setState({tetherBalance: tetherBalance.toString() })\r\n\r\n            console.log(\"Stanje racuna: \", tetherBalance)\r\n\r\n        } else {\r\n            window.alert('Error: Tether contract not deployed to the detected network!')\r\n        }\r\n\r\n\r\n        //Load Reward contracts\r\n        const rwdData = RWD.networks[networkId]\r\n        \r\n        if(rwdData) {\r\n            const rwd = new web3.eth.Contract(RWD.abi, rwdData.address)\r\n            this.setState({rwd})\r\n\r\n            let rwdBalance = await rwd.methods.balanceOf(this.state.account).call() //balance se bo spreminjal, zato je let\r\n            this.setState({rwdBalance: rwdBalance.toString() })\r\n\r\n            console.log('Stanje RWD:', rwdBalance)\r\n\r\n        } else {\r\n            window.alert('Error: Reward contract not deployed to the detected network!')\r\n        }\r\n        \r\n\r\n        //Load decentral bank - update state by bringing contract + update the staking balance\r\n        const decentralBankData = DecentralBank.networks[networkId]\r\n        \r\n        if(decentralBankData) {\r\n            const decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address)\r\n            this.setState({decentralBank})\r\n\r\n            let stakingBalance = await decentralBank.methods.stakingBalance(this.state.account).call() //balance se bo spreminjal, zato je let\r\n            this.setState({stakingBalance: stakingBalance.toString() })\r\n\r\n            console.log('Staking Balance:', stakingBalance)\r\n\r\n        } else {\r\n            window.alert('Error: Staking balance not deployed to the detected network!')\r\n        }\r\n        this.setState({loading: false})\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        //inicialization\r\n        this.state = {\r\n            account: \"0x0\",\r\n            tether: {},\r\n            rwd: {},\r\n            decentralBank: {},\r\n            tetherBalance: '0',\r\n            rwdBalance: '0',\r\n            stakingBalance: '0',\r\n            loading: true\r\n        }\r\n    }\r\n\r\n    //Our React Code\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar account={this.state.account} />\r\n                <div class=\"text-center\">\r\n                   <Main />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}